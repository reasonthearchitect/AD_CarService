package com.rta.carstore.test.business.business

import com.rta.carstore.business.ICarBusiness
import com.rta.carstore.business.impl.CarBusiness
import com.rta.carstore.domain.search.Car
import com.rta.carstore.repository.search.ICarSearchRepository
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.PageRequest
import spock.lang.Specification

/**
 * Generated unit test for the CarBusiness objects.
 */
class CarBusinessUnitSpec extends Specification {

    ICarBusiness carBusiness;

    def setup() {
        this.carBusiness = new CarBusiness();
    }

    def "simple findOne method spec generated by the framework"() {

        setup:
        def carSearchRepository = Mock(ICarSearchRepository);
        this.carBusiness.carRepository = carSearchRepository;
        def rcar = [id:"1"] as Car;

        when:
        def car = this.carBusiness.findOne("1");

        then:
        1 * carSearchRepository.findOne(_) >> rcar;
        car != null;
        car.id == "1";
    }

    def "simple find all method spec generated by the framework"() {

        setup:
        def carSearchRepository = Mock(ICarSearchRepository);
        this.carBusiness.carRepository = carSearchRepository;
        def rcars = [[id:"1"] as Car, [id:"1"] as Car];

        when:
        def cars = this.carBusiness.findAll(new PageRequest(1, 1));

        then:
        1 * carSearchRepository.findAll(_) >> new PageImpl<Car>(rcars);
        cars.getTotalElements() == 2;
    }

    def "simple save method generated by the framework"(){

        setup:
        def carSearchRepository = Mock(ICarSearchRepository);
        this.carBusiness.carRepository = carSearchRepository;
        def rcar = [id:"1"] as Car;

        when:
        def savedCar = this.carBusiness.save([]as Car);

        then:
        1 * carSearchRepository.save(_) >> rcar;
        savedCar.id != null;
    }

    def "simple delete method generated by the framework"() {
        setup:
        def carSearchRepository = Mock(ICarSearchRepository);
        this.carBusiness.carRepository = carSearchRepository;

        when:
        this.carBusiness.delete([] as Car);

        then:
        1 * carSearchRepository.delete(_);
    }
}
